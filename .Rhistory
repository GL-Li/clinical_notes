return(best_y_pred)
}
y_pred <- best_match(y_true, y_clusters)
best_match <- function(y_true, y_clusters){
y_pred <- rep(999, length(y_true))
matches <- subset(expand.grid(rep(list(0:2), 3)),
Var1 != Var2 & Var1 != Var3 & Var2 != Var3)
best_diag_sum <- 0  # total number of correct samples
for (i in 1:nrow(matches)){
match <- as.numeric(matches[i, ])
y_pred[y_clusters == 1] <- match[1]
y_pred[y_clusters == 2] <- match[2]
y_pred[y_clusters == 3] <- match[3]
tb <- table(y_true, y_pred)
diag_sum <- sum(diag(tb))
if (best_diag_sum < diag_sum){
best_diag_sum <- diag_sum
best_match <- match
best_accuracy <- diag_sum / length(y_true)
best_y_pred <- y_pred
}
}
print(table(y_true, best_y_pred))
print(paste("accuracy: ", best_accuracy))
return(best_y_pred)
}
y_pred <- best_match(y_true, y_clusters)
nrow(tfidf)
plot_pc1_pc2(prcomp(tfidf_note), y_clusters)
plot_pc1_pc2(prcomp(tfidf_note)$x, y_clusters)
y_pred <- best_match(y_true, y_clusters)
plot_pc1_pc2(prcomp(tfidf_note)$x, y_clusters)
plot_pc1_pc2(prcomp(tfidf_note)$x, y_true)
plot_pc1_pc2(prcomp(tfidf_note)$x, y_pred)
plot_pc1_pc2(prcomp(tfidf_note)$x, y_true == y_pred)
?par
par(mfrow = c(2, 2))
plot_pc1_pc2(prcomp(tfidf_note)$x, y_clusters)
plot_pc1_pc2(prcomp(tfidf_note)$x, y_true)
plot_pc1_pc2(prcomp(tfidf_note)$x, y_pred)
plot_pc1_pc2(prcomp(tfidf_note)$x, y_true == y_pred)
?plot
plot(1:3, 1:3, pch = 1:3)
plot(1:3, 1:3, pch = 0:2)
plot_pc1_pc2 <- function(pca, color = NULL, pch = NULL){
# Plot samples in pc1-pc2 space
#
# Arguments:
#   pca: matrix, pca of tfidf
#   color: int vector to mark the color of each sample. can be y_true,
#      y_clusters, y_pred, or other vector of the same length as pca
#   pch: int vector, shape of data point
stopifnot(length(color) == nrow(pca))
pc1 <- pca[, 1]
pc2 <- pca[, 2]
if (!is.null(color) & !is.null(pch)){
plot(pc1, pc2, col = as.factor(color), pch = as.factor(pch))
} else if (!is.null(color)){
plot(pc1, pc2, col = as.factor(color))
} else if (!is.null(pch)){
plot(pc1, pc2, pch = as.factor(pch))
} else {
plot(pc1, pc2)
}
}
plot_pc1_pc2(prcomp(tfidf_note)$x)
plot_pc1_pc2 <- function(pca, color = NULL, pch = NULL){
# Plot samples in pc1-pc2 space
#
# Arguments:
#   pca: matrix, pca of tfidf
#   color: int vector to mark the color of each sample. can be y_true,
#      y_clusters, y_pred, or other vector of the same length as pca
#   pch: int vector, shape of data point
pc1 <- pca[, 1]
pc2 <- pca[, 2]
if (!is.null(color) & !is.null(pch)){
plot(pc1, pc2, col = as.factor(color), pch = as.factor(pch))
} else if (!is.null(color)){
plot(pc1, pc2, col = as.factor(color))
} else if (!is.null(pch)){
plot(pc1, pc2, pch = as.factor(pch))
} else {
plot(pc1, pc2)
}
}
plot_pc1_pc2(prcomp(tfidf_note)$x)
plot_pc1_pc2(prcomp(tfidf_note)$x, color = y_true, pch = y_pred)
plot_pc1_pc2(prcomp(tfidf_note)$x, color = y_true)
plot_pc1_pc2(prcomp(tfidf_note)$x, pch = y_true)
plot_pc1_pc2 <- function(pca, color = NULL, pch = NULL){
# Plot samples in pc1-pc2 space
#
# Arguments:
#   pca: matrix, pca of tfidf
#   color: int vector to mark the color of each sample. can be y_true,
#      y_clusters, y_pred, or other vector of the same length as pca
#   pch: int vector, shape of data point
pc1 <- pca[, 1]
pc2 <- pca[, 2]
if (!is.null(color) & !is.null(pch)){
plot(pc1, pc2, col = as.factor(color), pch = pch)
} else if (!is.null(color)){
plot(pc1, pc2, col = as.factor(color))
} else if (!is.null(pch)){
plot(pc1, pc2, pch = pch)
} else {
plot(pc1, pc2)
}
}
plot_pc1_pc2(prcomp(tfidf_note)$x, pch = y_true)
plot_pc1_pc2(prcomp(tfidf_note)$x, pch = y_true, color = y_pred)
dev.off()
plot_pc1_pc2(prcomp(tfidf_note)$x, pch = y_true, color = y_pred)
?plot
plot_pc1_pc2 <- function(pca, color = NULL, pch = NULL, title = NULL){
# Plot samples in pc1-pc2 space
#
# Arguments:
#   pca: matrix, pca of tfidf
#   color: int vector to mark the color of each sample. can be y_true,
#      y_clusters, y_pred, or other vector of the same length as pca
#   pch: int vector, shape of data point
#   title: string, plot title
pc1 <- pca[, 1]
pc2 <- pca[, 2]
if (!is.null(color) & !is.null(pch)){
plot(pc1, pc2, col = as.factor(color), pch = pch, main = title)
} else if (!is.null(color)){
plot(pc1, pc2, col = as.factor(color), main = title)
} else if (!is.null(pch)){
plot(pc1, pc2, pch = pch, main = title)
} else {
plot(pc1, pc2, main = title)
}
}
plot_pc1_pc2(prcomp(tfidf_note)$x, pch = y_true, color = y_pred)
plot_pc1_pc2(prcomp(tfidf_note)$x, pch = y_true, color = y_pred, title = "aaa")
plot_pc1_pc2(prcomp(tfidf_note)$x, pch = y_clusters, title = "K-means Clusters")
legend("topright", legend = c("Gas", "Neuro", "Urol"))
legend("topright", legend = c("Gas", "Neuro", "Urol"), pch = c(0, 1, 2))
legend("topright", legend = c("Gas", "Neuro", "Urol"), pch = c(1, 2, 3))
legend("topright", legend = c("cluster 1", "cluster 2", "cluster 3"), pch = c(1, 2, 3))
plot_pc1_pc2(prcomp(tfidf_note)$x, color = y_true, title = "True Specialty")
legend("topright", legend = c("Gastroenterology", "Neurology", "Urology"),
col = c(0, 1, 2))
legend("topright", legend = c("Gastroenterology", "Neurology", "Urology"),
col = as.factor(c(0, 1, 2)))
plot_pc1_pc2 <- function(pca,
color = NULL,
color_map = c("red", "blue", "cyan"),
pch = NULL,
title = NULL){
# Plot samples in pc1-pc2 space
#
# Arguments:
#   pca: matrix, pca of tfidf
#   color: int vector to mark the color of each sample. can be y_true,
#      y_clusters, y_pred, or other vector of the same length as pca
#   color_map: string, color to map color
#   pch: int vector, shape of data point
#   title: string, plot title
pc1 <- pca[, 1]
pc2 <- pca[, 2]
sample_colors <- rep("black", nrow(pca))
if (!is.null(color)){
sample_colors[color == 0] <- color_map[1]
sample_colors[color == 1] <- color_map[2]
sample_colors[color == 2] <- color_map[3]
}
if (!is.null(color) & !is.null(pch)){
plot(pc1, pc2, col = sample_colors, pch = pch, main = title)
} else if (!is.null(color)){
plot(pc1, pc2, col = sample_colors, main = title)
} else if (!is.null(pch)){
plot(pc1, pc2, pch = pch, main = title)
} else {
plot(pc1, pc2, main = title)
}
}
plot_pc1_pc2(prcomp(tfidf_note)$x, color = y_true, title = "True Specialty")
legend("topright", legend = c("Gastroenterology", "Neurology", "Urology"),
col = c("red", "blue", "cyan"))
legend("topright", legend = c("Gastroenterology", "Neurology", "Urology"),
col = c("red", "blue", "cyan"), pch = 1)
plot_pc1_pc2(prcomp(tfidf_note)$x, y_pred, title = "Predicted Specialties")
legend("topright", legend = c("Gastroenterology", "Neurology", "Urology"),
col = c("red", "blue", "cyan"), pch = 1)
plot_pc1_pc2(prcomp(tfidf_note)$x, color = y_true == y_pred)
plot_pc1_pc2(prcomp(tfidf_note)$x, color = y_true == y_pred,
title = "Compare prediction to true specialties")
legend("topright", legend = c("Correct", "Wrong"),
col = c("blue", "red"), pch = 1)
plot_pc1_pc2(prcomp(tfidf_note)$x, color = y_true == y_pred,
pch = y_true,
title = "Compare prediction to true specialties")
legend("topright", legend = c("Correct", "Wrong"),
col = c("blue", "red"), pch = 1)
legend("topleft", legend = c("Gastroenterology", "Neurology", "Urology"),
pch = 0:2)
plot_pc1_pc2(prcomp(tfidf_note)$x, color = y_true == y_pred,
pch = y_true,
title = "Compare prediction to true specialties")
legend("topleft", legend = c("Correct", "Wrong"),
col = c("blue", "red"), pch = 1)
legend("topright", legend = c("Gastroenterology", "Neurology", "Urology"),
pch = 0:2)
View(dat)
table(y_pred, dat$specialty)
legend("topleft",
legend = c("Correct", "Wrong"),
col = c("blue", "red"),
pch = 4)
legend("topleft",
legend = c("Correct", "Wrong"),
col = c("blue", "red"),
lty = c(1, 1))
legend("topleft",
legend = c("Correct", "Wrong"),
col = c("blue", "red"),
lty = c(1, 1),
cex = 2)
legend("topleft",
legend = c("Correct", "Wrong"),
col = c("blue", "red"),
lty = c(1, 1),
cex = 2)
legend("topleft",
legend = c("Correct", "Wrong"),
col = c("blue", "red"),
lty = c(1, 1),
lw = 2)
legend("topleft",
legend = c("Correct", "Wrong"),
col = c("blue", "red"),
lty = c(1, 1),
lw = 5)
plot_pc1_pc2(prcomp(tfidf_note)$x,
color = y_true == y_pred,
pch = y_true,
title = "Compare prediction to true specialties")
legend("topleft",
legend = c("Correct", "Wrong"),
col = c("blue", "red"),
lty = c(1, 1),
lw = 5)
legend("topright", legend = c("Gastroenterology", "Neurology", "Urology"),
pch = 0:2)
par(mfrow = c(2, 2))
plot_pc1_pc2(prcomp(tfidf_note)$x,
pch = y_clusters,
title = "K-means Clusters")
legend("topright",
legend = c("cluster 1", "cluster 2", "cluster 3"),
pch = c(1, 2, 3))
plot_pc1_pc2(prcomp(tfidf_note)$x,
color = y_true,
title = "True Specialties")
legend("topright",
legend = c("Gastroenterology", "Neurology", "Urology"),
col = c("red", "blue", "cyan"),
pch = 1)
plot_pc1_pc2(prcomp(tfidf_note)$x,
y_pred,
title = "Predicted Specialties")
legend("topright",
legend = c("Gastroenterology", "Neurology", "Urology"),
col = c("red", "blue", "cyan"),
pch = 1)
plot_pc1_pc2(prcomp(tfidf_note)$x,
color = y_true == y_pred,
pch = y_true,
title = "Compare prediction to true specialties")
legend("topleft",
legend = c("Correct", "Wrong"),
col = c("blue", "red"),
lty = c(1, 1),
lw = 5)
legend("topright", legend = c("Gastroenterology", "Neurology", "Urology"),
pch = 0:2)
legend("topright",
legend = c("Gastroenterology", "Neurology", "Urology"),
col = c("red", "blue", "cyan"),
pch = 1,
cex = 0.8)
dev.off()
par(mfrow = c(2, 2))
plot_pc1_pc2(prcomp(tfidf_note)$x,
pch = y_clusters,
title = "K-means Clusters")
legend("topright",
legend = c("cluster 1", "cluster 2", "cluster 3"),
pch = c(1, 2, 3),
cex = 0.8)
plot_pc1_pc2(prcomp(tfidf_note)$x,
color = y_true,
title = "True Specialties")
legend("topright",
legend = c("Gastroenterology", "Neurology", "Urology"),
col = c("red", "blue", "cyan"),
pch = 1,
cex = 0.8)
plot_pc1_pc2(prcomp(tfidf_note)$x,
y_pred,
title = "Predicted Specialties")
legend("topright",
legend = c("Gastroenterology", "Neurology", "Urology"),
col = c("red", "blue", "cyan"),
pch = 1,
cex = 0.8)
plot_pc1_pc2(prcomp(tfidf_note)$x,
color = y_true == y_pred,
pch = y_true,
title = "Compare prediction to true specialties")
legend("topleft",
legend = c("Correct", "Wrong"),
col = c("blue", "red"),
lty = c(1, 1),
lw = 2,
cex = 0.8)
legend("topright", legend = c("Gastroenterology", "Neurology", "Urology"),
pch = 0:2,
cex = 0.8)
dev.off()
par(mfrow = c(2, 2))
plot_pc1_pc2(prcomp(tfidf_note)$x,
pch = y_clusters,
title = "K-means Clusters")
legend("topright",
legend = c("cluster 1", "cluster 2", "cluster 3"),
pch = c(1, 2, 3),
cex = 0.8)
plot_pc1_pc2(prcomp(tfidf_note)$x,
color = y_true,
title = "True Specialties")
legend("topright",
legend = c("Gastroenterology", "Neurology", "Urology"),
col = c("red", "blue", "cyan"),
pch = 1,
cex = 0.8)
plot_pc1_pc2(prcomp(tfidf_note)$x,
y_pred,
title = "Predicted Specialties")
legend("topright",
legend = c("Gastroenterology", "Neurology", "Urology"),
col = c("red", "blue", "cyan"),
pch = 1,
cex = 0.8)
plot_pc1_pc2(prcomp(tfidf_note)$x,
color = y_true == y_pred,
pch = y_true,
title = "Compare prediction to true specialties")
legend("topleft",
legend = c("Correct", "Wrong"),
col = c("blue", "red"),
lty = c(1, 1),
lw = 2,
cex = 0.8)
legend("topright", legend = c("Gastroenterology", "Neurology", "Urology"),
pch = 0:2,
cex = 0.8)
par(mfrow = c(2, 2))
plot_pc1_pc2(prcomp(tfidf_note)$x,
pch = y_clusters,
title = "K-means Clusters")
legend("topright",
legend = c("cluster 1", "cluster 2", "cluster 3"),
pch = c(1, 2, 3),
cex = 0.8)
plot_pc1_pc2(prcomp(tfidf_note)$x,
color = y_true,
title = "True Specialties")
legend("topright",
legend = c("Gastroenterology", "Neurology", "Urology"),
col = c("red", "blue", "cyan"),
pch = 1,
cex = 0.8)
plot_pc1_pc2(prcomp(tfidf_note)$x,
y_pred,
title = "Predicted Specialties")
legend("topright",
legend = c("Gastroenterology", "Neurology", "Urology"),
col = c("red", "blue", "cyan"),
pch = 1,
cex = 0.8)
plot_pc1_pc2(prcomp(tfidf_note)$x,
color = y_true == y_pred,
pch = y_true,
title = "Compare prediction to true specialties")
legend("topleft",
legend = c("Correct", "Wrong"),
col = c("blue", "red"),
pch = 16,
cex = 0.8)
legend("topright", legend = c("Gastroenterology", "Neurology", "Urology"),
pch = 0:2,
cex = 0.8)
source("utilities.R")
# Prepare data =================================================================
dat <- read_notes("data/amazon_medacy_mtsamples_gastr_neuro_urolo.csv",
cols_keep = c("id", "amazon_me", "specialty", "note"),
clean = TRUE,
y_label = TRUE)
# tfidf matrix
tfidf_note <- tfidf_tm(dat$note)
tfidf_amazon <- tfidf_tm(dat$amazon_me)
y_true <- dat$y
plot_pc1_pc2(pca)
pca
pca <- prcomp(tfidf_note)$x
plot_pc1_pc2(pca)
dev.off()
plot_pc1_pc2(pca)
curve(-3 * x, from = 0, to = 0.3, add = TRUE, col = "red")
pca <- prcomp(tfidf_amazon)$x
plot_pc1_pc2(pca)
curve(-3 * x, from = 0, to = 0.3, add = TRUE, col = "red")
curve(5 * x, from = 0, to = 0.3, add = TRUE, col = "green")
curve(0.8 * x, from = 0, to = -0.4, add = TRUE, col = "black")
# pca amazon_me ================================================================
# PCA on tfidf generated with Amazon Comprehend Medical named entities. Keep
# only PC1 and PC2 for clustering visualization and analysis
pca <- prcomp(tfidf_amazon)
pc1 <- pca$x[, 1]
pc2 <- pca$x[, 2]
# Plot samples in pc1 - pc2 space. Spot 3 clusters and add line boundary to
# seperate the clusters
plot(pc1, pc2, col = y + 1)
# Plot samples in pc1 - pc2 space. Spot 3 clusters and add line boundary to
# seperate the clusters
plot(pc1, pc2, col = y_true + 1)
curve(-2 * x, from = 0, to = 0.3, add = TRUE, col = "red")
curve(0.8 * x, from = 0, to = 0.6, add = TRUE, col = "green")
curve(-0.8 * x, from = 0, to = -0.4, add = TRUE, col = "black")
cluster1 <- (pc2 >= -2 * pc1) & (pc2 < 0.8 * pc1)
cluster2 <- (pc2 >= 0.8 * pc1) & (pc2 > -0.8 * pc1)
cluster3 <- (pc2 <= -0.8 * pc1) & (pc2 < -2 * pc1)
# assigne a label to each cluster
y_pred <- best_match(y_true, y_clusters)
# Prepare data =================================================================
dat <- read_notes("data/amazon_medacy_mtsamples_gastr_neuro_urolo.csv",
cols_keep = c("id", "amazon_me", "specialty", "note"),
clean = TRUE,
y_label = TRUE)
# tfidf matrix
tfidf_note <- tfidf_tm(dat$note)
tfidf_amazon <- tfidf_tm(dat$amazon_me)
y_true <- dat$y
pca <- prcomp(tfidf_note)$x
plot_pc1_pc2(pca, color = y_true)
pca <- prcomp(tfidf_note)$x
plot_pc1_pc2(pca, color = y_true)
pca <- prcomp(tfidf_note)$x
plot_pc1_pc2(pca, color = y_true)
# pca using note ===============================================================
# PCA on tfidf generated with clinical notes. Keep
# only PC1 and PC2 for clustering visualization and analysis
set.seed(1234)
pca <- prcomp(tfidf_note)$x
plot_pc1_pc2(pca, color = y_true)
plot_pc1_pc2(pca, color = y_true)
plot_pc1_pc2(pca)
# Plot samples in pc1 - pc2 space. Spot 3 clusters and add line boundary to
# seperate the clusters
curve(3 * x, from = 0, to = 0.3, add = TRUE, col = "red")
# Plot samples in pc1 - pc2 space. Spot 3 clusters and add line boundary to
# seperate the clusters
curve(4 * x, from = 0, to = 0.3, add = TRUE, col = "red")
# Plot samples in pc1 - pc2 space. Spot 3 clusters and add line boundary to
# seperate the clusters
curve(5 * x, from = 0, to = 0.3, add = TRUE, col = "red")
# Plot samples in pc1 - pc2 space. Spot 3 clusters and add line boundary to
# seperate the clusters
curve(10 * x, from = 0, to = 0.3, add = TRUE, col = "red")
curve(1 * x, from = 0, to = -0.3, add = TRUE, col = "green")
curve(1 * x, from = 0, to = -0.4, add = TRUE, col = "green")
curve(0.8 * x, from = 0, to = -0.4, add = TRUE, col = "green")
curve(-1 * x, from = 0, to = 0.4, add = TRUE, col = "black")
curve(-2 * x, from = 0, to = 0.4, add = TRUE, col = "black")
# Plot samples in pc1 - pc2 space. Spot 3 clusters and add line boundary to
# seperate the clusters
plot_pc1_pc2(pca)
curve(10 * x, from = 0, to = 0.3, add = TRUE, col = "red")
curve(0.8 * x, from = 0, to = -0.4, add = TRUE, col = "green")
curve(-2 * x, from = 0, to = 0.4, add = TRUE, col = "black")
pc1 <- pca[, 1]
pc2 <- pca[, 2]
source("utilities.R")
# Prepare data =================================================================
dat <- read_notes("data/amazon_medacy_mtsamples_gastr_neuro_urolo.csv",
cols_keep = c("id", "amazon_me", "specialty", "note"),
clean = TRUE,
y_label = TRUE)
# tfidf matrix
tfidf_note <- tfidf_tm(dat$note)
tfidf_amazon <- tfidf_tm(dat$amazon_me)
y_true <- dat$y
pca <- prcomp(tfidf_note)$x
# Plot samples in pc1 - pc2 space. Spot 3 clusters and add line boundary to
# seperate the clusters
plot_pc1_pc2(pca)
curve(10 * x, from = 0, to = 0.3, add = TRUE, col = "red")
curve(0.8 * x, from = 0, to = -0.4, add = TRUE, col = "green")
curve(-2 * x, from = 0, to = 0.4, add = TRUE, col = "black")
# pca using note ===============================================================
# PCA on tfidf generated with clinical notes. Keep
# only PC1 and PC2 for clustering visualization and analysis
set.seed(1234)
pca <- prcomp(tfidf_note)$x
# Plot samples in pc1 - pc2 space. Spot 3 clusters and add line boundary to
# seperate the clusters
plot_pc1_pc2(pca)
