)
cols <- c("specialty", "note")
set.seed(1234)
dat <- read_notes(
"data/mtsamples_multi_class.csv",
duplicate_rm = T,
specialties = specialties,
cols_keep = cols,
id = TRUE,
y_label = TRUE
)
y <- dat$y
notes <- dat$note
# train-test split =============================================================
# check functions in utilities.R under text2vec
in_train <- caret::createDataPartition(y, p = 0.7, list = FALSE)
train <- notes[in_train]
test <- notes[-in_train]
train_y <- y[in_train]
test_y <- y[-in_train]
train_vectorizer <- get_vectorizer(train)
train_dtm <- get_dtm(train, train_vectorizer)
test_dtm <- get_dtm(test, train_vectorizer)
tfidf_model <- fit_tfidf(train_dtm)
train_tfidf <- transform_tfidf(train_dtm, tfidf_model)
test_tfidf <- transform_tfidf(test_dtm, tfidf_model)
pca_model <- fit_pca(train_tfidf)
train_pca <- predict(pca_model, train_tfidf)
test_pca <- predict(pca_model, test_tfidf)
dim(train_tfidf)
colnames(train_tfidf)
# save data for multiclass classification and model deployment =================
save(train_tfidf, test_tfidf,
train_pca, test_pca,
y_train, y_test,
train_vectorizer, tfidf_model, pca_model,
file = "multiclass_classification_train_test_tfidf_pca_models.RData")
# save data for multiclass classification and model deployment =================
save(train_tfidf, test_tfidf,
train_pca, test_pca,
train_y, test_y,
train_vectorizer, tfidf_model, pca_model,
file = "multiclass_classification_train_test_tfidf_pca_models.RData")
save(train_vectorizer, tfidf_model, pca_model,
file = "shiny-apps/RData/multiclass_classification_tfidf_pca_models.RData")
library(e1071)
library(progress)
source("utilities.R")
# text2vec tfidf + pca =======================================================
load("multiclass_classification_train_test_tfidf_pca_models.RData")
y_train <- as.factor(train_y)
y_test <- as.factor(test_y)
mdl_2 <- svm(train_pca, y_train)
y_pred <- predict(mdl_2, test_pca)
y_pred <- predict(mdl_2, test_pca)
classes_x <- c(
"Gastroenterology", "Obstetrics\nGynecology",  "Cardiovascular\nPulmonary",
"Neurology", "Urology", "Orthopedic"
)
classes_y <- c(
"Gastro-\nenterology", "Obstetrics\nGynecology",  "Cardiovascular\nPulmonary",
"Neurology", "Urology", "Orthopedic"
)
plot_confusion_matrix(y_test, y_pred, classes_x, classes_y, type = "recall")
table(y_test, y_pred)
X_train <- train_pca[, 1:25]
X_test <- train_pca[, 1:25]
y_train <- as.factor(train_y)
y_test <- as.factor(test_y)
mdl_2 <- svm(train_pca, y_train)
mdl_2 <- svm(X_train, y_train)
y_pred <- predict(mdl_2, X_test)
classes_x <- c(
"Gastroenterology", "Obstetrics\nGynecology",  "Cardiovascular\nPulmonary",
"Neurology", "Urology", "Orthopedic"
)
classes_y <- c(
"Gastro-\nenterology", "Obstetrics\nGynecology",  "Cardiovascular\nPulmonary",
"Neurology", "Urology", "Orthopedic"
)
plot_confusion_matrix(y_test, y_pred, classes_x, classes_y, type = "recall")
table(y_test, y_pred)
# text2vec tfidf + pca =======================================================
load("multiclass_classification_train_test_tfidf_pca_models.RData")
X_train <- train_pca[, 1:25]
X_test <- train_pca[, 1:25]
y_train <- as.factor(train_y)
y_test <- as.factor(test_y)
mdl_2 <- svm(X_train, y_train)
y_pred <- predict(mdl_2, X_test)
classes_x <- c(
"Gastroenterology", "Obstetrics\nGynecology",  "Cardiovascular\nPulmonary",
"Neurology", "Urology", "Orthopedic"
)
classes_y <- c(
"Gastro-\nenterology", "Obstetrics\nGynecology",  "Cardiovascular\nPulmonary",
"Neurology", "Urology", "Orthopedic"
)
plot_confusion_matrix(y_test, y_pred, classes_x, classes_y, type = "recall")
length(y_test)
length(y_pred)
X_test <- test_pca[, 1:25]
y_pred <- predict(mdl_2, X_test)
classes_x <- c(
"Gastroenterology", "Obstetrics\nGynecology",  "Cardiovascular\nPulmonary",
"Neurology", "Urology", "Orthopedic"
)
classes_y <- c(
"Gastro-\nenterology", "Obstetrics\nGynecology",  "Cardiovascular\nPulmonary",
"Neurology", "Urology", "Orthopedic"
)
plot_confusion_matrix(y_test, y_pred, classes_x, classes_y, type = "recall")
plot_confusion_matrix(y_test, y_pred, classes_x, classes_y, type = "precision")
library(text2vec)
source("utilities.R")
# prepare data =================================================================
specialties <- c(
"Gastroenterology", "Obstetrics / Gynecology",  "Cardiovascular / Pulmonary",
"Neurology", "Urology", "Orthopedic"
)
cols <- c("specialty", "note")
set.seed(1234)
dat <- read_notes(
"data/mtsamples_multi_class.csv",
duplicate_rm = T,
specialties = specialties,
cols_keep = cols,
id = TRUE,
y_label = TRUE
)
y <- dat$y
notes <- dat$note
# train-test split =============================================================
# check functions in utilities.R under text2vec
in_train <- caret::createDataPartition(y, p = 0.7, list = FALSE)
train <- notes[in_train]
test <- notes[-in_train]
train_y <- y[in_train]
test_y <- y[-in_train]
train_vocab <- get_vocab(train)
View(train_vocab)
class(train_vocab)
train_vocab <- train_vocab[str_detect(train_vocab$term, "^[a-z]+$"),]
View(train_vocab)
train_vocab <- get_vocab(train)
train_vocab <- train_vocab[str_detect(train_vocab$term, "^[a-z]{2,}$"),]
train_vectorizer <- get_vectorizer(train_vocab)
train_dtm <- get_dtm(train, train_vectorizer)
test_dtm <- get_dtm(test, train_vectorizer)
tfidf_model <- fit_tfidf(train_dtm)
train_tfidf <- transform_tfidf(train_dtm, tfidf_model)
test_tfidf <- transform_tfidf(test_dtm, tfidf_model)
pca_model <- fit_pca(train_tfidf)
train_pca <- predict(pca_model, train_tfidf)
test_pca <- predict(pca_model, test_tfidf)
# save data for multiclass classification and model deployment =================
save(train_tfidf, test_tfidf,
train_pca, test_pca,
train_y, test_y,
train_vectorizer, tfidf_model, pca_model,
file = "multiclass_classification_train_test_tfidf_pca_models.RData")
save(train_vectorizer, tfidf_model, pca_model,
file = "shiny-apps/RData/multiclass_classification_tfidf_pca_models.RData")
library(e1071)
library(progress)
source("utilities.R")
# prepare data =================================================================
specialties <- c(
"Gastroenterology", "Obstetrics / Gynecology",  "Cardiovascular / Pulmonary",
"Neurology", "Urology", "Orthopedic"
)
cols <- c("specialty", "note")
set.seed(1234)
dat <- read_notes(
"data/mtsamples_multi_class.csv",
duplicate_rm = T,
specialties = specialties,
cols_keep = cols,
id = TRUE,
y_label = TRUE
)
tfidf <- tfidf_tm(dat$note)
y <- as.factor(dat$y)  # svm requires y to be factor
# text2vec tfidf + pca =======================================================
load("multiclass_classification_train_test_tfidf_pca_models.RData")
X_train <- train_pca[, 1:25]
X_test <- test_pca[, 1:25]
y_train <- as.factor(train_y)
y_test <- as.factor(test_y)
mdl_2 <- svm(X_train, y_train)
y_pred <- predict(mdl_2, X_test)
classes_x <- c(
"Gastroenterology", "Obstetrics\nGynecology",  "Cardiovascular\nPulmonary",
"Neurology", "Urology", "Orthopedic"
)
classes_y <- c(
"Gastro-\nenterology", "Obstetrics\nGynecology",  "Cardiovascular\nPulmonary",
"Neurology", "Urology", "Orthopedic"
)
plot_confusion_matrix(y_test, y_pred, classes_x, classes_y, type = "recall")
plot_confusion_matrix(y_test, y_pred, classes_x, classes_y, type = "precision")
accuracy_svm_tfidf <- accuracy(y_test, y_pred)
plot_confusion_matrix(y_test, y_pred, classes_x, classes_y, type = "recall")
# text2vec tfidf + pca =======================================================
load("multiclass_classification_train_test_tfidf_pca_models.RData")
X_train <- train_pca[, 1:25]
X_test <- test_pca[, 1:25]
y_train <- as.factor(train_y)
y_test <- as.factor(test_y)
svm_model_deploy <- svm(X_train, y_train)
y_pred <- predict(mdl_2, X_test)
classes_x <- c(
"Gastroenterology", "Obstetrics\nGynecology",  "Cardiovascular\nPulmonary",
"Neurology", "Urology", "Orthopedic"
)
classes_y <- c(
"Gastro-\nenterology", "Obstetrics\nGynecology",  "Cardiovascular\nPulmonary",
"Neurology", "Urology", "Orthopedic"
)
plot_confusion_matrix(y_test, y_pred, classes_x, classes_y, type = "recall")
plot_confusion_matrix(y_test, y_pred, classes_x, classes_y, type = "precision")
accuracy_svm_tfidf <- accuracy(y_test, y_pred)
saveRDS(svm_model_deploy,
file = "shiny-apps/trained_models/svm_model_deploy.RData")
library(shiny)
library(shinydashboard)
?textAreaInput
runApp('shiny-apps')
str_split("abc def\nfgh igh")
str_split("abc def\nfgh igh", "\n")
?reactive
?saveRDS
saveRDS(svm_model_deploy,
file = "shiny-apps/trained_models/svm_model_deploy.rds")
runApp('shiny-apps')
note_bows$note[1]
runApp('shiny-apps')
runApp('shiny-apps')
?submitButton
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
aaa = "pain in the ass"
aaa = "pain in the ass\nfluid in mouth"
bbb = str_split(aaa)
bbb = str_split(aaa, "\n")
bbb
unlist(bbb)
runApp('shiny-apps')
runApp('shiny-apps')
aaa
bbb <- aaa %>% str_split("\n") %>%
unlist() %>%
get_dtm(train_vectorizer) %>%
transform_tfidf(tfidf_model)
bbb
dim(bbb)
ccc <- predict(pca_model, bbb)[, 1:25]
ccc
predict(svm_model_deploy, ccc)
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
tfidf
tfidf_note[1:3, 1:3]
tfidf_note[1:3, 1:3] -> aaa
as.character(aaa)
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
dim(tfidf_amazon)
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
str_split("abc")
str_split("abc", "\n")
str_split("abc", "\n") %>% unlist()
get_dtm("abc")
get_dtm("abc", train_vectorizer())
get_dtm("abc", train_vectorizer
)
get_dtm("abc", train_vectorizer) -> aaa
View(aaa)
bbb <- transform_tfidf(aaa, tfidf_model)
bbb
sum(bbb)
ccc = predict(pca_model, bbb)
ccc
ccc = predict(pca_model, bbb)[, 1:25]
ccc
predict(svm_model_deploy, ccc)
?prcomp
shiny::runApp('shiny-apps')
install.packages("text2vec")
install.packages("text2vec")
shiny::runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
shiny::runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
# remove all duplicates including the first one
rows_duplicated <- duplicated(dat_all$note) | duplicated(dat_all$note, fromLast = TRUE)
dat_specialty <- mtsamples_all[!rows_duplicated, specialty]
unique(mtsamples_all$specialty)
dput(unique(mtsamples_all$specialty))
# keep only selected medical specialties
to_keep <- c("Allergy / Immunology", "Autopsy", "Bariatrics", "Cardiovascular / Pulmonary",
"Chiropractic", "Cosmetic / Plastic Surgery",
"Dentistry", "Dermatology", "Diets and Nutritions",
"Emergency Room Reports", "Endocrinology", "ENT - Otolaryngology",
"Gastroenterology", "Hematology - Oncology",
"Hospice - Palliative Care",
"Nephrology", "Neurology", "Neurosurgery", "Obstetrics / Gynecology",
"Ophthalmology", "Orthopedic", "Pain Management",
"Pediatrics - Neonatal", "Physical Medicine - Rehab", "Podiatry",
"Psychiatry / Psychology", "Rheumatology", "Sleep Medicine",
"Speech - Language", "Urology")
# keep only selected medical specialties
to_keep <- c("Allergy / Immunology", "Autopsy", "Bariatrics", "Cardiovascular / Pulmonary",
"Chiropractic", "Cosmetic / Plastic Surgery",
"Dentistry", "Dermatology", "Diets and Nutritions",
"Emergency Room Reports", "Endocrinology", "ENT - Otolaryngology",
"Gastroenterology", "Hematology - Oncology",
"Hospice - Palliative Care",
"Nephrology", "Neurology", "Neurosurgery", "Obstetrics / Gynecology",
"Ophthalmology", "Orthopedic", "Pain Management",
"Pediatrics - Neonatal", "Physical Medicine - Rehab", "Podiatry",
"Psychiatry / Psychology", "Rheumatology", "Sleep Medicine",
"Speech - Language", "Urology")
dat_specialty <- mtsamples_all[specialty %in% to_keep]
# remove all duplicates including the first one
rows_duplicated <- duplicated(dat_all$note) | duplicated(dat_all$note, fromLast = TRUE)
dat_specialty <- dat_specialty[!rows_duplicated, specialty]
# remove all duplicates including the first one
rows_duplicated <- duplicated(dat_all$note) | duplicated(dat_all$note, fromLast = TRUE)
# remove all duplicates including the first one
rows_duplicated <- duplicated(dat_specialty$note) | duplicated(dat_specialty$note, fromLast = TRUE)
dat_specialty <- dat_specialty[!rows_duplicated, specialty]
table(dat_specialty)
sort(table(dat_specialty), decreasing = T)
sort(table(dat_specialty), decreasing = T) -> bbb
# keep only selected medical specialties
to_keep <- c("Allergy / Immunology", "Autopsy", "Bariatrics", "Cardiovascular / Pulmonary",
"Chiropractic", "Cosmetic / Plastic Surgery",
"Dentistry", "Dermatology", "Diets and Nutritions",
"Emergency Room Reports", "Endocrinology", "ENT - Otolaryngology",
"Gastroenterology", "Hematology - Oncology",
"Hospice - Palliative Care",
"Nephrology", "Neurology", "Neurosurgery", "Obstetrics / Gynecology",
"Ophthalmology", "Orthopedic", "Pain Management",
"Pediatrics - Neonatal", "Physical Medicine - Rehab", "Podiatry",
"Psychiatry / Psychology", "Rheumatology", "Sleep Medicine",
"Speech - Language", "Urology")
dat_specialty <- mtsamples_all[specialty %in% to_keep]
sort(table(dat_specialty$specialty), decreasing = T) -> aaa
aaa
bbb
# count specialty include duplicates
count <- sort(table(dat_specialty$specialty), decreasing = TRUE)
count_top <- count[1:20]
ggplot() +
geom_col(aes(x = factor(names(count_top), levels = names(count_top)),
y = as.integer(count_top) / N),
fill = "gray80") +
geom_text(aes(x = factor(names(count_top), levels = names(count_top)),
y = as.integer(count_top) / N,
label = paste0(round(100 * as.integer(count_top) / N, 1), "%")),
hjust = 1,
color = "gray20") +
scale_y_continuous(expand = c(0, 0),
labels = scales::percent_format()) +
labs(x = NULL,
y = NULL,
title = "Frequencies of Top 20 Section Headers (As-Is)") +
coord_flip() +
theme(panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank())
ggplot() +
geom_col(aes(x = factor(names(count_top), levels = names(count_top)),
y = as.integer(count_top) / N),
fill = "gray80") +
geom_text(aes(x = factor(names(count_top), levels = names(count_top)),
y = as.integer(count_top),
label = as.integer(count_top),
hjust = 1,
color = "gray20")) +
scale_y_continuous(expand = c(0, 0),
labels = scales::percent_format()) +
labs(x = NULL,
y = NULL,
title = "Frequencies of Top 20 Section Headers (As-Is)") +
coord_flip() +
theme(panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank())
ggplot() +
geom_col(aes(x = factor(names(count_top), levels = names(count_top)),
y = as.integer(count_top)),
fill = "gray80") +
geom_text(aes(x = factor(names(count_top), levels = names(count_top)),
y = as.integer(count_top),
label = as.integer(count_top),
hjust = 1,
color = "gray20")) +
scale_y_continuous(expand = c(0, 0),
labels = scales::percent_format()) +
labs(x = NULL,
y = NULL,
title = "Frequencies of Top 20 Section Headers (As-Is)") +
coord_flip() +
theme(panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank())
ggplot() +
geom_col(aes(x = factor(names(count_top), levels = names(count_top)),
y = as.integer(count_top)),
fill = "gray80")
ggplot() +
geom_col(aes(x = factor(names(count_top), levels = names(count_top)),
y = as.integer(count_top)),
fill = "gray80") +
geom_text(aes(x = factor(names(count_top), levels = names(count_top)),
y = as.integer(count_top),
label = as.integer(count_top),
hjust = 1,
color = "gray20")) +
scale_y_continuous(expand = c(0, 0),
labels = scales::percent_format()) +
labs(x = NULL,
y = NULL,
title = "Frequencies of Top 20 Section Headers (As-Is)") +
coord_flip() +
theme(panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank())
ggplot() +
geom_col(aes(x = factor(names(count_top), levels = names(count_top)),
y = as.integer(count_top)),
fill = "gray80") +
geom_text(aes(x = factor(names(count_top), levels = names(count_top)),
y = as.integer(count_top),
label = as.integer(count_top),
hjust = 1,
color = "gray20")) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = NULL,
y = NULL,
title = "Frequencies of Top 20 Section Headers (As-Is)") +
coord_flip() +
theme(panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank())
count_top
str(count_top)
as.integer(count_top)
ggplot() +
geom_col(aes(x = factor(names(count_top), levels = names(count_top)),
y = as.integer(count_top)),
fill = "gray80") +
geom_text(aes(x = factor(names(count_top), levels = names(count_top)),
y = as.integer(count_top),
label = as.integer(count_top)),
hjust = 1,
color = "gray20") +
scale_y_continuous(expand = c(0, 0)) +
labs(x = NULL,
y = NULL,
title = "Count of Top 20 Medical Specialties") +
coord_flip() +
theme(panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank())
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
source("utilities.R")
mt <- fread("data/mtsamples_scraped.csv", header = TRUE)
# duplicated note
dup_note <- mt[, .N, by = note]
table(as.integer(dup_note))
table(as.integer(dup_note$N))
shiny::runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
