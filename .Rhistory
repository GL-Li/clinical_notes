layer_dense(units = 16, activation = "relu") %>%
layer_dropout(0.2) %>%
# output layer
layer_dense(n_class, activation = "softmax")
summary(model)
# compile, fit, and evaluate model in place
compile(model,
loss = "categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
fit(model,
x = X_train, y = y_train,
epochs = 30,
batch_size = 32,
validation_split = 0.3,
verbose = 3
)
y_pred <- predict(model, X_test)
y_pred_class <- predict_classes(model, X_test)
accuracy_nn_pca <- accuracy(y_test_class, y_pred_class)
shiny::runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
c(a =1, b = 2 c=3)
c(a =1, b = 2, c=3)
c(a =1, b = 2, c=3) -> aaa
aaa["a"]
bbb = c(1 = "a", 2 = "b", 3 = "c")
bbb <- c(1 = "a", 2 = "b", 3 = "c")
aaa
names(aaa)[1]
dat[, .(specialty, y)]
dat[, unique(y), by=specialty]
dat[, unique(specialty), by=y]
as.integer(1:3)
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
aaa = factor(0:5)
aaa
as.integer(aaa)
as.integer(as.character(aaa))
# take input from text area or file upload, whichever updated =================
lookup_table <- c(
"Cardiovascular / Pulmonary",
"Gastroenterology",
"Obstetrics / Gynecology",
"Neurology",
"Orthopedic",
" Urology"
)
runApp('shiny-apps')
aaa
runApp('shiny-apps')
shiny::runApp('shiny-apps')
runApp('shiny-apps')
dim(dat_gas_neu_uro)
sp = sample(1:604, 100)
aaa = dat_gas_neu_uro$note[sp]
write.table(aaa, file = "~/Downloads/aaa.txt", sep = "\n")
write.table(aaa, file = "~/Downloads/aaa.txt", sep = "\n")
write.table(aaa, file = "~/Downloads/aaa.txt", sep = "\n", row.names = F)
runApp('shiny-apps')
dat_gas_neu_uro$specialty[sp]
library(text2vec)
source("utilities.R")
# prepare data =================================================================
specialties <- c(
"Gastroenterology", "Obstetrics / Gynecology",  "Cardiovascular / Pulmonary",
"Neurology", "Urology", "Orthopedic"
)
cols <- c("specialty", "note")
set.seed(1234)
dat <- read_notes(
"data/mtsamples_multi_class.csv",
duplicate_rm = T,
specialties = specialties,
cols_keep = cols,
id = TRUE,
y_label = TRUE
)
y <- dat$y
notes <- dat$note
# train-test split =============================================================
# check functions in utilities.R under text2vec
in_train <- caret::createDataPartition(y, p = 0.7, list = FALSE)
train <- notes[in_train]
test <- notes[-in_train]
train_y <- y[in_train]
test_y <- y[-in_train]
train_vocab <- get_vocab(train)
train_vocab <- train_vocab[str_detect(train_vocab$term, "^[a-z]{2,}$"),]
train_vectorizer <- get_vectorizer(train_vocab)
train_dtm <- get_dtm(train, train_vectorizer)
test_dtm <- get_dtm(test, train_vectorizer)
tfidf_model <- fit_tfidf(train_dtm)
train_tfidf <- transform_tfidf(train_dtm, tfidf_model)
test_tfidf <- transform_tfidf(test_dtm, tfidf_model)
pca_model <- fit_pca(train_tfidf)
train_pca <- predict(pca_model, train_tfidf)
test_pca <- predict(pca_model, test_tfidf)
library(e1071)
library(progress)
source("utilities.R")
# text2vec tfidf + pca =======================================================
load("multiclass_classification_train_test_tfidf_pca_models.RData")
X_train <- train_pca[, 1:25]
X_test <- test_pca[, 1:25]
y_train <- as.factor(train_y)
y_test <- as.factor(test_y)
svm_model_deploy <- svm(X_train, y_train)
y_pred <- predict(svm_model_deploy, X_test)
classes_x <- c(
"Gastroenterology", "Obstetrics\nGynecology",  "Cardiovascular\nPulmonary",
"Neurology", "Urology", "Orthopedic"
)
classes_y <- c(
"Gastro-\nenterology", "Obstetrics\nGynecology",  "Cardiovascular\nPulmonary",
"Neurology", "Urology", "Orthopedic"
)
plot_confusion_matrix(y_test, y_pred, classes_x, classes_y, type = "recall")
plot_confusion_matrix(y_test, y_pred, classes_x, classes_y, type = "precision")
accuracy_svm_tfidf <- accuracy(y_test, y_pred)
# text2vec tfidf + pca =======================================================
load("multiclass_classification_train_test_tfidf_pca_models.RData")
X_train <- train_pca[, 1:25]
X_test <- test_pca[, 1:25]
y_train <- as.factor(train_y)
y_test <- as.factor(test_y)
svm_model_deploy <- svm(X_train, y_train)
y_pred <- predict(svm_model_deploy, X_test)
classes_x <- c(
"Gastroenterology", "Obstetrics\nGynecology",  "Cardiovascular\nPulmonary",
"Neurology", "Urology", "Orthopedic"
)
classes_y <- c(
"Gastro-\nenterology", "Obstetrics\nGynecology",  "Cardiovascular\nPulmonary",
"Neurology", "Urology", "Orthopedic"
)
plot_confusion_matrix(y_test, y_pred, classes_x, classes_y, type = "recall")
source("utilities.R")
plot_confusion_matrix(y_test, y_pred, classes_x, classes_y, type = "recall")
plot_confusion_matrix(y_test, y_pred, classes_x, classes_y, type = "precision")
accuracy_svm_tfidf <- accuracy(y_test, y_pred)
saveRDS(svm_model_deploy,
file = "shiny-apps/trained_models/svm_model_deploy.rds")
runApp('shiny-apps')
runApp()
runApp('shiny-apps')
runApp('shiny-apps')
runApp('shiny-apps')
library(text2vec)
source("utilities.R")
# prepare data =================================================================
specialties <- c(
"Gastroenterology", "Obstetrics / Gynecology",  "Cardiovascular / Pulmonary",
"Neurology", "Urology", "Orthopedic"
)
cols <- c("specialty", "note")
set.seed(1234)
dat <- read_notes(
"data/mtsamples_multi_class.csv",
duplicate_rm = T,
specialties = specialties,
cols_keep = cols,
id = TRUE,
y_label = TRUE
)
y <- dat$y
notes <- dat$note
# train-test split =============================================================
# check functions in utilities.R under text2vec
in_train <- caret::createDataPartition(y, p = 0.7, list = FALSE)
train <- notes[in_train]
test <- notes[-in_train]
train_y <- y[in_train]
test_y <- y[-in_train]
train_vocab <- get_vocab(train)
train_vocab <- train_vocab[str_detect(train_vocab$term, "^[a-z]{2,}$"),]
train_vectorizer <- get_vectorizer(train_vocab)
train_dtm <- get_dtm(train, train_vectorizer)
test_dtm <- get_dtm(test, train_vectorizer)
tfidf_model <- fit_tfidf(train_dtm)
train_tfidf <- transform_tfidf(train_dtm, tfidf_model)
test_tfidf <- transform_tfidf(test_dtm, tfidf_model)
pca_model <- fit_pca(train_tfidf)
train_pca <- predict(pca_model, train_tfidf)
test_pca <- predict(pca_model, test_tfidf)
# save data for multiclass classification and model deployment =================
save(train_tfidf, test_tfidf,
train_pca, test_pca,
train_y, test_y,
train_vectorizer, tfidf_model, pca_model,
file = "multiclass_classification_train_test_tfidf_pca_models.RData")
save(train_vectorizer, tfidf_model, pca_model,
file = "shiny-apps/RData/multiclass_classification_tfidf_pca_models.RData")
# create and saved model for deployment ========================================
load("multiclass_classification_train_test_tfidf_pca_models.RData")
X_train <- train_pca[, 1:25]
X_test <- test_pca[, 1:25]
y_train <- as.factor(train_y)
y_test <- as.factor(test_y)
svm_model_deploy <- svm(X_train, y_train)
y_pred <- predict(svm_model_deploy, X_test)
classes_x <- c(
"Gastroenterology", "Obstetrics\nGynecology",  "Cardiovascular\nPulmonary",
"Neurology", "Urology", "Orthopedic"
)
classes_y <- c(
"Gastro-\nenterology", "Obstetrics\nGynecology",  "Cardiovascular\nPulmonary",
"Neurology", "Urology", "Orthopedic"
)
plot_confusion_matrix(y_test, y_pred, classes_x, classes_y, type = "recall")
plot_confusion_matrix(y_test, y_pred, classes_x, classes_y, type = "precision")
accuracy_svm_tfidf <- accuracy(y_test, y_pred)
saveRDS(svm_model_deploy,
file = "shiny-apps/trained_models/svm_model_deploy.rds")
class(tfidf_model)
names(tfidf_model)
ddd <- fread("~/Downloads/aaa.txt")
ddd
ddd <- fread("~/Downloads/aaa.txt", sep = " ")
ddd <- fread("~/Downloads/aaa.txt", sep = "\n")
ddd <- fread("~/Downloads/aaa.txt", sep = "\n", header = F)
ddd$V1
# .. load trained models ====
load("RData/multiclass_classification_tfidf_pca_models.RData")
svm_model_deploy <- readRDS("trained_models/svm_model_deploy.rds")
setwd("~/Dropbox/work-with-health-data/clinical_notes/shiny-apps")
# .. load trained models ====
load("RData/multiclass_classification_tfidf_pca_models.RData")
library(text2vec)
source("utilities.R")
# prepare data =================================================================
specialties <- c(
"Gastroenterology", "Obstetrics / Gynecology",  "Cardiovascular / Pulmonary",
"Neurology", "Urology", "Orthopedic"
)
# prepare data =================================================================
specialties <- c(
"Gastroenterology", "Obstetrics / Gynecology",  "Cardiovascular / Pulmonary",
"Neurology", "Urology", "Orthopedic"
)
cols <- c("specialty", "note")
set.seed(1234)
?train_vectorizer
# create and saved model for deployment ========================================
load("multiclass_classification_train_test_tfidf_pca_models.RData")
dat = data.table::fread("~/Downloads/aaa.txt", sep = "\n", header = F)
library(data.table)
library(magrittr)
library(stringr)
library(dplyr)
library(ggplot2)
library(wordcloud)
library(RColorBrewer)
library(dendextend)
library(text2vec)
library(e1071)
# .. load trained models ====
load("RData/multiclass_classification_tfidf_pca_models.RData")
setwd("~/Dropbox/work-with-health-data/clinical_notes/shiny-apps")
# .. load trained models ====
load("RData/multiclass_classification_tfidf_pca_models.RData")
svm_model_deploy <- readRDS("trained_models/svm_model_deploy.rds")
# .. text2vec functions ====
get_iter <- function(corpus, ids = NULL, stem = TRUE){
# create iterator for text2vec
#
# Arguments:
#   corpus: string vector
#   ids: id of corpus
#   stem: bool, use stem tokenizer if TRUE, word tokenizer if not
#
# Return:
#   a text2vec iterator
#
if (stem){
tokenizer <- function(x) {
word_tokenizer(x) %>%
lapply( function(x) SnowballC::wordStem(x, language="en"))
}
} else {
tokenizer <- word_tokenizer
}
it <- itoken(corpus, tolower, tokenizer, ids = ids)
}
get_vocab <- function(corpus){
# Create text2vec vocabularoy of a corpus
it <- get_iter(corpus)
vocab <- create_vocabulary(it, stopwords = tm::stopwords())
}
get_vectorizer <- function(corpus){
# Create text2vec vectorizer from corpus for use in create_dtm
vocab <- get_vocab(corpus)
vocab_vectorizer(vocab)
}
get_dtm <- function(corpus, vectorizer){
# Get dtm of a corpus using existing vectorizer
it <- get_iter(corpus)
dtm <- create_dtm(it, vectorizer)
}
fit_tfidf <- function(dtm){
# create a tfidf model using dtm
mdl <- TfIdf$new()
fit_transform(dtm, mdl)  # fit does not work
return(mdl)
}
transform_tfidf <- function(dtm, tfidf_model){
# Get normalized tfidf matrix of dtm using tfidf_model
tfidf <- transform(dtm, tfidf_model)
tfidf <- as.matrix(tfidf)
tfidf <- tfidf / sqrt(rowSums(tfidf * tfidf))
}
dtm = get_dtm(dat$V1, train_vectorizer)
tfidf = transform_tfidf(dtm, tfidf_model)
dim(tfidf)
pca = predict(pca_model, tfidf)
dim(pca)
aaa = predict(svm_model_deploy, pca[, 1:25])
aaa
rowSums(tfidf * tfidf)
plot(pca)
table(aaa)
library(text2vec)
source("utilities.R")
setwd("~/Dropbox/work-with-health-data/clinical_notes")
library(text2vec)
source("utilities.R")
# prepare data =================================================================
specialties <- c(
"Gastroenterology", "Obstetrics / Gynecology",  "Cardiovascular / Pulmonary",
"Neurology", "Urology", "Orthopedic"
)
cols <- c("specialty", "note")
set.seed(1234)
dat <- read_notes(
"data/mtsamples_multi_class.csv",
duplicate_rm = T,
specialties = specialties,
cols_keep = cols,
id = TRUE,
y_label = TRUE
)
y <- dat$y
notes <- dat$note
aaa = dat[sample(1:1402, 100)]
fwrite(aaa[, .(note)], file = "~/Downloads/aaa_note.txt")
?fwrite
fwrite(aaa[, .(note)], file = "~/Downloads/aaa_note.txt", col.names = F)
fwrite(aaa[, .(y)], file = "~/Downloads/aaa_y.txt", col.names = F)
table(aaa$y)
notes = aaa$note
# prepare data =================================================================
specialties <- c(
"Gastroenterology", "Obstetrics / Gynecology",  "Cardiovascular / Pulmonary",
"Neurology", "Urology", "Orthopedic"
)
cols <- c("specialty", "note")
set.seed(1234)
dat <- read_notes(
"data/mtsamples_multi_class.csv",
duplicate_rm = T,
specialties = specialties,
cols_keep = cols,
id = TRUE,
y_label = TRUE
)
y <- dat$y
notes <- dat$note
# train-test split =============================================================
# check functions in utilities.R under text2vec
in_train <- caret::createDataPartition(y, p = 0.7, list = FALSE)
train <- notes[in_train]
test <- notes[-in_train]
train_y <- y[in_train]
test_y <- y[-in_train]
train_vocab <- get_vocab(train)
train_vocab <- train_vocab[str_detect(train_vocab$term, "^[a-z]{2,}$"),]
train_vectorizer <- get_vectorizer(train_vocab)
train_dtm <- get_dtm(train, train_vectorizer)
test_dtm <- get_dtm(test, train_vectorizer)
tfidf_model <- fit_tfidf(train_dtm)
train_tfidf <- transform_tfidf(train_dtm, tfidf_model)
test_tfidf <- transform_tfidf(test_dtm, tfidf_model)
pca_model <- fit_pca(train_tfidf)
train_pca <- predict(pca_model, train_tfidf)
test_pca <- predict(pca_model, test_tfidf)
X_train <- train_pca[, 1:25]
X_test <- test_pca[, 1:25]
y_train <- as.factor(train_y)
y_test <- as.factor(test_y)
svm_model_deploy <- svm(X_train, y_train)
y_pred <- predict(svm_model_deploy, X_test)
classes_x <- c(
"Gastroenterology", "Obstetrics\nGynecology",  "Cardiovascular\nPulmonary",
"Neurology", "Urology", "Orthopedic"
)
classes_y <- c(
"Gastro-\nenterology", "Obstetrics\nGynecology",  "Cardiovascular\nPulmonary",
"Neurology", "Urology", "Orthopedic"
)
plot_confusion_matrix(y_test, y_pred, classes_x, classes_y, type = "recall")
dtm = get_dtm(aaa$note, train_vectorizer)
tfidf = transform_tfidf(dtm, tfidf_model)
pca = predict(pca_model, tfidf)
bbb = predict(svm_model_deploy, pca[, 1:25])
table(bbb)
# .. text2vec functions ====
get_iter <- function(corpus, ids = NULL, stem = TRUE){
# create iterator for text2vec
#
# Arguments:
#   corpus: string vector
#   ids: id of corpus
#   stem: bool, use stem tokenizer if TRUE, word tokenizer if not
#
# Return:
#   a text2vec iterator
#
if (stem){
tokenizer <- function(x) {
word_tokenizer(x) %>%
lapply( function(x) SnowballC::wordStem(x, language="en"))
}
} else {
tokenizer <- word_tokenizer
}
it <- itoken(corpus, tolower, tokenizer, ids = ids)
}
get_vocab <- function(corpus){
# Create text2vec vocabularoy of a corpus
it <- get_iter(corpus)
vocab <- create_vocabulary(it, stopwords = tm::stopwords())
}
get_vectorizer <- function(corpus){
# Create text2vec vectorizer from corpus for use in create_dtm
vocab <- get_vocab(corpus)
vocab_vectorizer(vocab)
}
get_dtm <- function(corpus, vectorizer){
# Get dtm of a corpus using existing vectorizer
it <- get_iter(corpus)
dtm <- create_dtm(it, vectorizer)
}
fit_tfidf <- function(dtm){
# create a tfidf model using dtm
mdl <- TfIdf$new()
fit_transform(dtm, mdl)  # fit does not work
return(mdl)
}
transform_tfidf <- function(dtm, tfidf_model){
# Get normalized tfidf matrix of dtm using tfidf_model
tfidf <- transform(dtm, tfidf_model)
tfidf <- as.matrix(tfidf)
tfidf <- tfidf / sqrt(rowSums(tfidf * tfidf))
}
# create and saved model for deployment ========================================
load("multiclass_classification_train_test_tfidf_pca_models.RData")
X_train <- train_pca[, 1:25]
X_test <- test_pca[, 1:25]
y_train <- as.factor(train_y)
y_test <- as.factor(test_y)
svm_model_deploy <- svm(X_train, y_train)
y_pred <- predict(svm_model_deploy, X_test)
classes_x <- c(
"Gastroenterology", "Obstetrics\nGynecology",  "Cardiovascular\nPulmonary",
"Neurology", "Urology", "Orthopedic"
)
classes_y <- c(
"Gastro-\nenterology", "Obstetrics\nGynecology",  "Cardiovascular\nPulmonary",
"Neurology", "Urology", "Orthopedic"
)
plot_confusion_matrix(y_test, y_pred, classes_x, classes_y, type = "recall")
plot_confusion_matrix(y_test, y_pred, classes_x, classes_y, type = "precision")
accuracy_svm_tfidf <- accuracy(y_test, y_pred)
table(y_test, y_pred)
aaa = fread("~/Downloads/aaa_note.txt", sep = "\n", header = F)
dtm = get_dtm(aaa)
dtm = get_dtm(aaa, train_vectorizer)
library(text2vec)
dtm = get_dtm(aaa, train_vectorizer)
dtm = get_dtm(aaa$V1, train_vectorizer)
tfidf = transform_tfidf(dtm, tfidf_model)
pca = predict(pca_model, tfidf)
prd = predict(svm_model_deploy, pca[, 1:25])
table(prd)
aaa$V1
aaa$V1[1:3]
View(aaa)
texts = aaa$V1
dtm <- get_dtm(texts, train_vectorizer)
tfidf <- transform_tfidf(dtm, tfidf_model)
# use drop = FALSE so one row is still a matrix not a vector
pca <- predict(pca_model, tfidf)[, 1:25, drop = FALSE]
predict(svm_model_deploy, pca)
shiny::runApp('shiny-apps')
aaa = fread("~/Downloads/aaa_note.txt")
aaa = fread("~/Downloads/aaa_note.txt", sep = "\n", header = F)
texts = aaa$V1
dtm <- get_dtm(texts, train_vectorizer)
tfidf <- transform_tfidf(dtm, tfidf_model)
# use drop = FALSE so one row is still a matrix not a vector
pca <- predict(pca_model, tfidf)[, 1:25, drop = FALSE]
predict(svm_model_deploy, pcs[, 1:25])
predict(svm_model_deploy, pca[, 1:25])
runApp('shiny-apps')
View(aaaaaaa)
shiny::runApp('shiny-apps')
runApp('shiny-apps')
